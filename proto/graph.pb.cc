// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Neighbour_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vertex_graph_2eproto;
namespace serializable {
class NeighbourDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Neighbour> _instance;
} _Neighbour_default_instance_;
class VertexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vertex> _instance;
} _Vertex_default_instance_;
class TokensGraph_TokensEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokensGraph_TokensEntry_DoNotUse> _instance;
} _TokensGraph_TokensEntry_DoNotUse_default_instance_;
class TokensGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokensGraph> _instance;
} _TokensGraph_default_instance_;
}  // namespace serializable
static void InitDefaultsscc_info_Neighbour_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serializable::_Neighbour_default_instance_;
    new (ptr) ::serializable::Neighbour();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serializable::Neighbour::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Neighbour_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Neighbour_graph_2eproto}, {}};

static void InitDefaultsscc_info_TokensGraph_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serializable::_TokensGraph_default_instance_;
    new (ptr) ::serializable::TokensGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serializable::TokensGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TokensGraph_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TokensGraph_graph_2eproto}, {
      &scc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto.base,
      &scc_info_Vertex_graph_2eproto.base,}};

static void InitDefaultsscc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serializable::_TokensGraph_TokensEntry_DoNotUse_default_instance_;
    new (ptr) ::serializable::TokensGraph_TokensEntry_DoNotUse();
  }
  ::serializable::TokensGraph_TokensEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto}, {}};

static void InitDefaultsscc_info_Vertex_graph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::serializable::_Vertex_default_instance_;
    new (ptr) ::serializable::Vertex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::serializable::Vertex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vertex_graph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vertex_graph_2eproto}, {
      &scc_info_Neighbour_graph_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_graph_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_graph_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializable::Neighbour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serializable::Neighbour, id_),
  PROTOBUF_FIELD_OFFSET(::serializable::Neighbour, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializable::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serializable::Vertex, id_),
  PROTOBUF_FIELD_OFFSET(::serializable::Vertex, neighbours_),
  PROTOBUF_FIELD_OFFSET(::serializable::Vertex, token_id_),
  PROTOBUF_FIELD_OFFSET(::serializable::Vertex, type_),
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph_TokensEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph_TokensEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph_TokensEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph_TokensEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph, tokens_),
  PROTOBUF_FIELD_OFFSET(::serializable::TokensGraph, vertexes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::serializable::Neighbour)},
  { 7, -1, sizeof(::serializable::Vertex)},
  { 16, 23, sizeof(::serializable::TokensGraph_TokensEntry_DoNotUse)},
  { 25, -1, sizeof(::serializable::TokensGraph)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serializable::_Neighbour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serializable::_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serializable::_TokensGraph_TokensEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::serializable::_TokensGraph_default_instance_),
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\014serializable\"&\n\tNeighbour"
  "\022\n\n\002id\030\001 \001(\004\022\r\n\005count\030\002 \001(\004\"\261\001\n\006Vertex\022\n"
  "\n\002id\030\001 \001(\004\022+\n\nneighbours\030\002 \003(\0132\027.seriali"
  "zable.Neighbour\022\020\n\010token_id\030\003 \001(\004\022-\n\004typ"
  "e\030\004 \001(\0162\037.serializable.Vertex.VertexType"
  "\"-\n\nVertexType\022\t\n\005START\020\000\022\013\n\007REGULAR\020\001\022\007"
  "\n\003END\020\002\"\233\001\n\013TokensGraph\0225\n\006tokens\030\001 \003(\0132"
  "%.serializable.TokensGraph.TokensEntry\022&"
  "\n\010vertexes\030\002 \003(\0132\024.serializable.Vertex\032-"
  "\n\013TokensEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001("
  "\t:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_graph_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_graph_2eproto_sccs[4] = {
  &scc_info_Neighbour_graph_2eproto.base,
  &scc_info_TokensGraph_graph_2eproto.base,
  &scc_info_TokensGraph_TokensEntry_DoNotUse_graph_2eproto.base,
  &scc_info_Vertex_graph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_graph_2eproto_once;
static bool descriptor_table_graph_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto = {
  &descriptor_table_graph_2eproto_initialized, descriptor_table_protodef_graph_2eproto, "graph.proto", 413,
  &descriptor_table_graph_2eproto_once, descriptor_table_graph_2eproto_sccs, descriptor_table_graph_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
  file_level_metadata_graph_2eproto, 4, file_level_enum_descriptors_graph_2eproto, file_level_service_descriptors_graph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_graph_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_graph_2eproto), true);
namespace serializable {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vertex_VertexType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[0];
}
bool Vertex_VertexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vertex_VertexType Vertex::START;
constexpr Vertex_VertexType Vertex::REGULAR;
constexpr Vertex_VertexType Vertex::END;
constexpr Vertex_VertexType Vertex::VertexType_MIN;
constexpr Vertex_VertexType Vertex::VertexType_MAX;
constexpr int Vertex::VertexType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Neighbour::InitAsDefaultInstance() {
}
class Neighbour::_Internal {
 public:
};

Neighbour::Neighbour()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serializable.Neighbour)
}
Neighbour::Neighbour(const Neighbour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:serializable.Neighbour)
}

void Neighbour::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
}

Neighbour::~Neighbour() {
  // @@protoc_insertion_point(destructor:serializable.Neighbour)
  SharedDtor();
}

void Neighbour::SharedDtor() {
}

void Neighbour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Neighbour& Neighbour::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Neighbour_graph_2eproto.base);
  return *internal_default_instance();
}


void Neighbour::Clear() {
// @@protoc_insertion_point(message_clear_start:serializable.Neighbour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* Neighbour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Neighbour::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializable.Neighbour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializable.Neighbour)
  return target;
}

size_t Neighbour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializable.Neighbour)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neighbour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serializable.Neighbour)
  GOOGLE_DCHECK_NE(&from, this);
  const Neighbour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Neighbour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serializable.Neighbour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serializable.Neighbour)
    MergeFrom(*source);
  }
}

void Neighbour::MergeFrom(const Neighbour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serializable.Neighbour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void Neighbour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serializable.Neighbour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neighbour::CopyFrom(const Neighbour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializable.Neighbour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbour::IsInitialized() const {
  return true;
}

void Neighbour::InternalSwap(Neighbour* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Neighbour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vertex::InitAsDefaultInstance() {
}
class Vertex::_Internal {
 public:
};

Vertex::Vertex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serializable.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      neighbours_(from.neighbours_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:serializable.Vertex)
}

void Vertex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vertex_graph_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:serializable.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
}

void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vertex& Vertex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vertex_graph_2eproto.base);
  return *internal_default_instance();
}


void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:serializable.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbours_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .serializable.Neighbour neighbours = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbours(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 token_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          token_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .serializable.Vertex.VertexType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::serializable::Vertex_VertexType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializable.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .serializable.Neighbour neighbours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neighbours_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_neighbours(i), target, stream);
  }

  // uint64 token_id = 3;
  if (this->token_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_token_id(), target);
  }

  // .serializable.Vertex.VertexType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializable.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializable.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serializable.Neighbour neighbours = 2;
  total_size += 1UL * this->_internal_neighbours_size();
  for (const auto& msg : this->neighbours_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 token_id = 3;
  if (this->token_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_id());
  }

  // .serializable.Vertex.VertexType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serializable.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serializable.Vertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serializable.Vertex)
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serializable.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbours_.MergeFrom(from.neighbours_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.token_id() != 0) {
    _internal_set_token_id(from._internal_token_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Vertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serializable.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializable.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neighbours_.InternalSwap(&other->neighbours_);
  swap(id_, other->id_);
  swap(token_id_, other->token_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TokensGraph_TokensEntry_DoNotUse::TokensGraph_TokensEntry_DoNotUse() {}
TokensGraph_TokensEntry_DoNotUse::TokensGraph_TokensEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TokensGraph_TokensEntry_DoNotUse::MergeFrom(const TokensGraph_TokensEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TokensGraph_TokensEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TokensGraph_TokensEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TokensGraph::InitAsDefaultInstance() {
}
class TokensGraph::_Internal {
 public:
};

TokensGraph::TokensGraph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:serializable.TokensGraph)
}
TokensGraph::TokensGraph(const TokensGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vertexes_(from.vertexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tokens_.MergeFrom(from.tokens_);
  // @@protoc_insertion_point(copy_constructor:serializable.TokensGraph)
}

void TokensGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokensGraph_graph_2eproto.base);
}

TokensGraph::~TokensGraph() {
  // @@protoc_insertion_point(destructor:serializable.TokensGraph)
  SharedDtor();
}

void TokensGraph::SharedDtor() {
}

void TokensGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokensGraph& TokensGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokensGraph_graph_2eproto.base);
  return *internal_default_instance();
}


void TokensGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:serializable.TokensGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  vertexes_.Clear();
  _internal_metadata_.Clear();
}

const char* TokensGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, string> tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tokens_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .serializable.Vertex vertexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokensGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializable.TokensGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, string> tokens = 1;
  if (!this->_internal_tokens().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "serializable.TokensGraph.TokensEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tokens().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tokens().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_tokens().begin();
          it != this->_internal_tokens().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TokensGraph_TokensEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_tokens().begin();
          it != this->_internal_tokens().end(); ++it) {
        target = TokensGraph_TokensEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .serializable.Vertex vertexes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializable.TokensGraph)
  return target;
}

size_t TokensGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializable.TokensGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> tokens = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tokens_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_tokens().begin();
      it != this->_internal_tokens().end(); ++it) {
    total_size += TokensGraph_TokensEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .serializable.Vertex vertexes = 2;
  total_size += 1UL * this->_internal_vertexes_size();
  for (const auto& msg : this->vertexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokensGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:serializable.TokensGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const TokensGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokensGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:serializable.TokensGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:serializable.TokensGraph)
    MergeFrom(*source);
  }
}

void TokensGraph::MergeFrom(const TokensGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serializable.TokensGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  vertexes_.MergeFrom(from.vertexes_);
}

void TokensGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:serializable.TokensGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokensGraph::CopyFrom(const TokensGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializable.TokensGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokensGraph::IsInitialized() const {
  return true;
}

void TokensGraph::InternalSwap(TokensGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tokens_.Swap(&other->tokens_);
  vertexes_.InternalSwap(&other->vertexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokensGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serializable
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serializable::Neighbour* Arena::CreateMaybeMessage< ::serializable::Neighbour >(Arena* arena) {
  return Arena::CreateInternal< ::serializable::Neighbour >(arena);
}
template<> PROTOBUF_NOINLINE ::serializable::Vertex* Arena::CreateMaybeMessage< ::serializable::Vertex >(Arena* arena) {
  return Arena::CreateInternal< ::serializable::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::serializable::TokensGraph_TokensEntry_DoNotUse* Arena::CreateMaybeMessage< ::serializable::TokensGraph_TokensEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::serializable::TokensGraph_TokensEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::serializable::TokensGraph* Arena::CreateMaybeMessage< ::serializable::TokensGraph >(Arena* arena) {
  return Arena::CreateInternal< ::serializable::TokensGraph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
