// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace serializable {
class Neighbour;
class NeighbourDefaultTypeInternal;
extern NeighbourDefaultTypeInternal _Neighbour_default_instance_;
class TokensGraph;
class TokensGraphDefaultTypeInternal;
extern TokensGraphDefaultTypeInternal _TokensGraph_default_instance_;
class TokensGraph_TokensEntry_DoNotUse;
class TokensGraph_TokensEntry_DoNotUseDefaultTypeInternal;
extern TokensGraph_TokensEntry_DoNotUseDefaultTypeInternal _TokensGraph_TokensEntry_DoNotUse_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace serializable
PROTOBUF_NAMESPACE_OPEN
template<> ::serializable::Neighbour* Arena::CreateMaybeMessage<::serializable::Neighbour>(Arena*);
template<> ::serializable::TokensGraph* Arena::CreateMaybeMessage<::serializable::TokensGraph>(Arena*);
template<> ::serializable::TokensGraph_TokensEntry_DoNotUse* Arena::CreateMaybeMessage<::serializable::TokensGraph_TokensEntry_DoNotUse>(Arena*);
template<> ::serializable::Vertex* Arena::CreateMaybeMessage<::serializable::Vertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serializable {

enum Vertex_VertexType : int {
  Vertex_VertexType_START = 0,
  Vertex_VertexType_REGULAR = 1,
  Vertex_VertexType_END = 2,
  Vertex_VertexType_Vertex_VertexType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Vertex_VertexType_Vertex_VertexType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Vertex_VertexType_IsValid(int value);
constexpr Vertex_VertexType Vertex_VertexType_VertexType_MIN = Vertex_VertexType_START;
constexpr Vertex_VertexType Vertex_VertexType_VertexType_MAX = Vertex_VertexType_END;
constexpr int Vertex_VertexType_VertexType_ARRAYSIZE = Vertex_VertexType_VertexType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vertex_VertexType_descriptor();
template<typename T>
inline const std::string& Vertex_VertexType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vertex_VertexType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vertex_VertexType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vertex_VertexType_descriptor(), enum_t_value);
}
inline bool Vertex_VertexType_Parse(
    const std::string& name, Vertex_VertexType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vertex_VertexType>(
    Vertex_VertexType_descriptor(), name, value);
}
// ===================================================================

class Neighbour :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializable.Neighbour) */ {
 public:
  Neighbour();
  virtual ~Neighbour();

  Neighbour(const Neighbour& from);
  Neighbour(Neighbour&& from) noexcept
    : Neighbour() {
    *this = ::std::move(from);
  }

  inline Neighbour& operator=(const Neighbour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neighbour& operator=(Neighbour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Neighbour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbour* internal_default_instance() {
    return reinterpret_cast<const Neighbour*>(
               &_Neighbour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Neighbour& a, Neighbour& b) {
    a.Swap(&b);
  }
  inline void Swap(Neighbour* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neighbour* New() const final {
    return CreateMaybeMessage<Neighbour>(nullptr);
  }

  Neighbour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neighbour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Neighbour& from);
  void MergeFrom(const Neighbour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializable.Neighbour";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:serializable.Neighbour)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Vertex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializable.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const final {
    return CreateMaybeMessage<Vertex>(nullptr);
  }

  Vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializable.Vertex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vertex_VertexType VertexType;
  static constexpr VertexType START =
    Vertex_VertexType_START;
  static constexpr VertexType REGULAR =
    Vertex_VertexType_REGULAR;
  static constexpr VertexType END =
    Vertex_VertexType_END;
  static inline bool VertexType_IsValid(int value) {
    return Vertex_VertexType_IsValid(value);
  }
  static constexpr VertexType VertexType_MIN =
    Vertex_VertexType_VertexType_MIN;
  static constexpr VertexType VertexType_MAX =
    Vertex_VertexType_VertexType_MAX;
  static constexpr int VertexType_ARRAYSIZE =
    Vertex_VertexType_VertexType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VertexType_descriptor() {
    return Vertex_VertexType_descriptor();
  }
  template<typename T>
  static inline const std::string& VertexType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VertexType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VertexType_Name.");
    return Vertex_VertexType_Name(enum_t_value);
  }
  static inline bool VertexType_Parse(const std::string& name,
      VertexType* value) {
    return Vertex_VertexType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNeighboursFieldNumber = 2,
    kIdFieldNumber = 1,
    kTokenIdFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated .serializable.Neighbour neighbours = 2;
  int neighbours_size() const;
  private:
  int _internal_neighbours_size() const;
  public:
  void clear_neighbours();
  ::serializable::Neighbour* mutable_neighbours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Neighbour >*
      mutable_neighbours();
  private:
  const ::serializable::Neighbour& _internal_neighbours(int index) const;
  ::serializable::Neighbour* _internal_add_neighbours();
  public:
  const ::serializable::Neighbour& neighbours(int index) const;
  ::serializable::Neighbour* add_neighbours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Neighbour >&
      neighbours() const;

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 token_id = 3;
  void clear_token_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_id() const;
  void set_token_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_id() const;
  void _internal_set_token_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .serializable.Vertex.VertexType type = 4;
  void clear_type();
  ::serializable::Vertex_VertexType type() const;
  void set_type(::serializable::Vertex_VertexType value);
  private:
  ::serializable::Vertex_VertexType _internal_type() const;
  void _internal_set_type(::serializable::Vertex_VertexType value);
  public:

  // @@protoc_insertion_point(class_scope:serializable.Vertex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Neighbour > neighbours_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class TokensGraph_TokensEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TokensGraph_TokensEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TokensGraph_TokensEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TokensGraph_TokensEntry_DoNotUse();
  TokensGraph_TokensEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TokensGraph_TokensEntry_DoNotUse& other);
  static const TokensGraph_TokensEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TokensGraph_TokensEntry_DoNotUse*>(&_TokensGraph_TokensEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "serializable.TokensGraph.TokensEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TokensGraph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializable.TokensGraph) */ {
 public:
  TokensGraph();
  virtual ~TokensGraph();

  TokensGraph(const TokensGraph& from);
  TokensGraph(TokensGraph&& from) noexcept
    : TokensGraph() {
    *this = ::std::move(from);
  }

  inline TokensGraph& operator=(const TokensGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokensGraph& operator=(TokensGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokensGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokensGraph* internal_default_instance() {
    return reinterpret_cast<const TokensGraph*>(
               &_TokensGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TokensGraph& a, TokensGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(TokensGraph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokensGraph* New() const final {
    return CreateMaybeMessage<TokensGraph>(nullptr);
  }

  TokensGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokensGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokensGraph& from);
  void MergeFrom(const TokensGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokensGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializable.TokensGraph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 1,
    kVertexesFieldNumber = 2,
  };
  // map<uint64, string> tokens = 1;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_tokens();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      tokens() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_tokens();

  // repeated .serializable.Vertex vertexes = 2;
  int vertexes_size() const;
  private:
  int _internal_vertexes_size() const;
  public:
  void clear_vertexes();
  ::serializable::Vertex* mutable_vertexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Vertex >*
      mutable_vertexes();
  private:
  const ::serializable::Vertex& _internal_vertexes(int index) const;
  ::serializable::Vertex* _internal_add_vertexes();
  public:
  const ::serializable::Vertex& vertexes(int index) const;
  ::serializable::Vertex* add_vertexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Vertex >&
      vertexes() const;

  // @@protoc_insertion_point(class_scope:serializable.TokensGraph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TokensGraph_TokensEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Vertex > vertexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Neighbour

// uint64 id = 1;
inline void Neighbour::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbour::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbour::id() const {
  // @@protoc_insertion_point(field_get:serializable.Neighbour.id)
  return _internal_id();
}
inline void Neighbour::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Neighbour::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serializable.Neighbour.id)
}

// uint64 count = 2;
inline void Neighbour::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbour::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Neighbour::count() const {
  // @@protoc_insertion_point(field_get:serializable.Neighbour.count)
  return _internal_count();
}
inline void Neighbour::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void Neighbour::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:serializable.Neighbour.count)
}

// -------------------------------------------------------------------

// Vertex

// uint64 id = 1;
inline void Vertex::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vertex::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vertex::id() const {
  // @@protoc_insertion_point(field_get:serializable.Vertex.id)
  return _internal_id();
}
inline void Vertex::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Vertex::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serializable.Vertex.id)
}

// repeated .serializable.Neighbour neighbours = 2;
inline int Vertex::_internal_neighbours_size() const {
  return neighbours_.size();
}
inline int Vertex::neighbours_size() const {
  return _internal_neighbours_size();
}
inline void Vertex::clear_neighbours() {
  neighbours_.Clear();
}
inline ::serializable::Neighbour* Vertex::mutable_neighbours(int index) {
  // @@protoc_insertion_point(field_mutable:serializable.Vertex.neighbours)
  return neighbours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Neighbour >*
Vertex::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:serializable.Vertex.neighbours)
  return &neighbours_;
}
inline const ::serializable::Neighbour& Vertex::_internal_neighbours(int index) const {
  return neighbours_.Get(index);
}
inline const ::serializable::Neighbour& Vertex::neighbours(int index) const {
  // @@protoc_insertion_point(field_get:serializable.Vertex.neighbours)
  return _internal_neighbours(index);
}
inline ::serializable::Neighbour* Vertex::_internal_add_neighbours() {
  return neighbours_.Add();
}
inline ::serializable::Neighbour* Vertex::add_neighbours() {
  // @@protoc_insertion_point(field_add:serializable.Vertex.neighbours)
  return _internal_add_neighbours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Neighbour >&
Vertex::neighbours() const {
  // @@protoc_insertion_point(field_list:serializable.Vertex.neighbours)
  return neighbours_;
}

// uint64 token_id = 3;
inline void Vertex::clear_token_id() {
  token_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vertex::_internal_token_id() const {
  return token_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vertex::token_id() const {
  // @@protoc_insertion_point(field_get:serializable.Vertex.token_id)
  return _internal_token_id();
}
inline void Vertex::_internal_set_token_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_id_ = value;
}
inline void Vertex::set_token_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_id(value);
  // @@protoc_insertion_point(field_set:serializable.Vertex.token_id)
}

// .serializable.Vertex.VertexType type = 4;
inline void Vertex::clear_type() {
  type_ = 0;
}
inline ::serializable::Vertex_VertexType Vertex::_internal_type() const {
  return static_cast< ::serializable::Vertex_VertexType >(type_);
}
inline ::serializable::Vertex_VertexType Vertex::type() const {
  // @@protoc_insertion_point(field_get:serializable.Vertex.type)
  return _internal_type();
}
inline void Vertex::_internal_set_type(::serializable::Vertex_VertexType value) {
  
  type_ = value;
}
inline void Vertex::set_type(::serializable::Vertex_VertexType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serializable.Vertex.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TokensGraph

// map<uint64, string> tokens = 1;
inline int TokensGraph::_internal_tokens_size() const {
  return tokens_.size();
}
inline int TokensGraph::tokens_size() const {
  return _internal_tokens_size();
}
inline void TokensGraph::clear_tokens() {
  tokens_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
TokensGraph::_internal_tokens() const {
  return tokens_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
TokensGraph::tokens() const {
  // @@protoc_insertion_point(field_map:serializable.TokensGraph.tokens)
  return _internal_tokens();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
TokensGraph::_internal_mutable_tokens() {
  return tokens_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
TokensGraph::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_map:serializable.TokensGraph.tokens)
  return _internal_mutable_tokens();
}

// repeated .serializable.Vertex vertexes = 2;
inline int TokensGraph::_internal_vertexes_size() const {
  return vertexes_.size();
}
inline int TokensGraph::vertexes_size() const {
  return _internal_vertexes_size();
}
inline void TokensGraph::clear_vertexes() {
  vertexes_.Clear();
}
inline ::serializable::Vertex* TokensGraph::mutable_vertexes(int index) {
  // @@protoc_insertion_point(field_mutable:serializable.TokensGraph.vertexes)
  return vertexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Vertex >*
TokensGraph::mutable_vertexes() {
  // @@protoc_insertion_point(field_mutable_list:serializable.TokensGraph.vertexes)
  return &vertexes_;
}
inline const ::serializable::Vertex& TokensGraph::_internal_vertexes(int index) const {
  return vertexes_.Get(index);
}
inline const ::serializable::Vertex& TokensGraph::vertexes(int index) const {
  // @@protoc_insertion_point(field_get:serializable.TokensGraph.vertexes)
  return _internal_vertexes(index);
}
inline ::serializable::Vertex* TokensGraph::_internal_add_vertexes() {
  return vertexes_.Add();
}
inline ::serializable::Vertex* TokensGraph::add_vertexes() {
  // @@protoc_insertion_point(field_add:serializable.TokensGraph.vertexes)
  return _internal_add_vertexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializable::Vertex >&
TokensGraph::vertexes() const {
  // @@protoc_insertion_point(field_list:serializable.TokensGraph.vertexes)
  return vertexes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serializable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::serializable::Vertex_VertexType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serializable::Vertex_VertexType>() {
  return ::serializable::Vertex_VertexType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
